<?xml version='1.0' encoding='utf-8'?><ResultsSession buildId="Default Project-2022-10-18" date="10/18/22 09:44:53" machine="CONQUEROR" project="Default Project" tag="Recommended Rules" time="2022-10-18T09:44:53+02:00" toolName="C++test" toolVer="2022.1.0.20220615B1827" user="mgorecka">
   <TestConfig machine="CONQUEROR" name="Recommended Rules" pseudoUrl="c++test.builtin://Recommended Rules" user="mgorecka"/>
   <Authors>
      <Author id="dev1" name="mgorecka"/>
   </Authors>
   <VersionInfos>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.execution" resultId="IExecutionViolation" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.execution" resultId="InsureViolation" ver="3"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.scope" resultId="IScopeProjectInfo" ver="3"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricEstimationInfo" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.generation" resultId="IGenerationInfo" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.generation" resultId="IGenerationProjectInfo" ver="2"/>
   </VersionInfos>
   
   
   <Scope>
      <ProjectInformations>
         <ScopeProjectInfo fltFiles="6" fltLns="236" project="/FlowAnalysisCpp" totFiles="6" totLns="236"/>
      </ProjectInformations>
   </Scope>
   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:20">
      <Goal mode="1" name="Static"/>
      <Projects>
         <Project bdCheckedFiles="3" bdTotalFiles="3" checkedFiles="6" checkedLns="236" name="FlowAnalysisCpp" qfixErrs="0" suppErrs="1" totErrs="11" totFiles="6" totLns="236"/>
      </Projects>
      <Rules>
         <RulesList>
            <Rule cat="BD-API" desc="Do not pass negative values to functions expecting non-negative arguments" id="BD-API-NEGPARAM" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Always catch exceptions" id="BD-PB-EXCEPT" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Avoid use before initialization" id="BD-PB-NOTINIT" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Avoid null pointer dereferencing" id="BD-PB-NP" sev="1">
               <Stats authTot="1;" authUrg="1;" total="1"/>
            </Rule>
            <Rule cat="BD-PB" desc="Avoid buffer overflow due to defining incorrect format limits" id="BD-PB-OVERFFMT" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Avoid overflow due to reading a not zero terminated string" id="BD-PB-OVERFNZT" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Avoid overflow when reading from a buffer" id="BD-PB-OVERFRD" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Avoid overflow when writing to a buffer" id="BD-PB-OVERFWR" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Avoid division by zero" id="BD-PB-ZERO" sev="1">
               <Stats authTot="1;" authUrg="1;" total="1"/>
            </Rule>
            <Rule cat="BD-PB" desc="Avoid accessing arrays out of bounds" id="BD-PB-ARRAY" sev="2">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Avoid conditions that always evaluate to the same value" id="BD-PB-CC" sev="2">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Do not check for null after dereferencing" id="BD-PB-DEREF" sev="2">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Suspicious setting of stream flags" id="BD-PB-STREAMFLAGS" sev="3">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Restore stream format" id="BD-PB-STREAMFMT" sev="3">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="BD-RES" desc="Properly deallocate dynamically allocated resources" id="BD-RES-BADDEALLOC" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="BD-RES" desc="Do not use resources that have been freed" id="BD-RES-FREE" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="BD-RES" desc="Do not free resources using invalid pointers" id="BD-RES-INVFREE" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="BD-RES" desc="Ensure resources are freed" id="BD-RES-LEAKS" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="BD-TRS" desc="Avoid double locking" id="BD-TRS-DLOCK" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="BD-TRS" desc="Avoid race conditions when using fork and file descriptors" id="BD-TRS-FORKFILE" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="BD-TRS" desc="Do not abandon unreleased locks" id="BD-TRS-LOCK" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="BD-TRS" desc="Do not acquire locks in different order" id="BD-TRS-ORDER" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="BD-TRS" desc="Avoid race conditions while checking for the existence of a symbolic link" id="BD-TRS-SYMLINK" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="BD-TRS" desc="Do not use blocking functions while holding a lock" id="BD-TRS-TSHL" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="CDD" desc="Avoid function duplication" id="CDD-DUPM" sev="2">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="CODSTA" desc="Local variables should not use the same names as member variables" id="CODSTA-44" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="CODSTA" desc="Pointer should not be compared with NULL using relational operators &lt;, >, >=, &lt;=" id="CODSTA-147" sev="3">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="CODSTA" desc="Do not use string literals as operands of equality or relational operators" id="CODSTA-148" sev="3">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="CODSTA" desc="Avoid infinite loops" id="CODSTA-82" sev="3">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="CODSTA-CPP" desc="Constructors allowing for conversion should be made explicit" id="CODSTA-CPP-04" sev="1">
               <Stats authTot="1;" authUrg="1;" total="1"/>
            </Rule>
            <Rule cat="EXCEPT" desc="Throw by value, catch by reference" id="EXCEPT-02" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="EXCEPT" desc="Do not throw from within destructor" id="EXCEPT-03" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="INIT" desc="All member variables should be initialized in constructor" id="INIT-06" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="METRIC" desc="McCabe Cyclomatic Complexity" id="METRIC.CC" sev="3">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="METRIC" desc="Nested Blocks Depth" id="METRIC.NBD" sev="3">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="MISRA2004" desc="Floating-point expressions shall not be tested for equality or inequality" id="MISRA2004-13_3" sev="3">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="MISRA2004" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2004-16_8" sev="3">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="MISRA2004" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRA2004-17_6_a" sev="3">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="MRM" desc="Do not invoke malloc/realloc for objects having constructors" id="MRM-08" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="MRM" desc="Declare a copy assignment operator for classes with dynamically allocated memory" id="MRM-37" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="MRM" desc="Declare a copy constructor for classes with dynamically allocated memory" id="MRM-38" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="MRM" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="MRM-35" sev="3">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="MRM" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="MRM-36" sev="3">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="MRM" desc="Do not use 'delete' on pointers to a void type" id="MRM-51" sev="3">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="OOP" desc="Class cannot inherit other class more than once unless it is virtual inheritance" id="OOP-03" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="OOP" desc="Avoid calling virtual functions from constructors" id="OOP-16" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="OOP" desc="If a class has virtual functions it shall have a virtual destructor" id="OOP-23" sev="2">
               <Stats authTot="3;" authUrg="3;" total="3"/>
            </Rule>
            <Rule cat="OPT" desc="Pass objects by reference instead of by value" id="OPT-14" sev="3">
               <Stats authTot="5;" authUrg="5;" total="5"/>
            </Rule>
            <Rule cat="PB" desc="Do not call delete on non-pointers" id="PB-13" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="PB" desc="Properly terminate character strings" id="PB-21" sev="1">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="PB" desc="Do not cast from or to incomplete class at the point of casting" id="PB-54" sev="2">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="PB" desc="Do not delete objects with incomplete class at the point of deletion" id="PB-55" sev="2">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="PB" desc="Boolean condition always evaluates to the same value due to enumeration with only zero or only non-zero constants" id="PB-68" sev="2">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="PB" desc="Suspicious argument to malloc" id="PB-60" sev="3">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
            <Rule cat="PB" desc="Pointer arithmetic performed on freshly allocated memory" id="PB-61" sev="3">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Rule>
         </RulesList>
         <CategoriesList>
            <Category desc="Flow Analysis" name="BD" total="122">
               <Category desc="Incorrect API usage" name="BD-API" total="6">
                  <Stats authTot="0;" authUrg="0;" total="0"/>
               </Category>
               <Category desc="Possible Bugs" name="BD-PB" total="67">
                  <Stats authTot="2;" authUrg="2;" total="2"/>
               </Category>
               <Category desc="Resources" name="BD-RES" total="8">
                  <Stats authTot="0;" authUrg="0;" total="0"/>
               </Category>
               <Category desc="Threads &amp; Synchronization" name="BD-TRS" total="15">
                  <Stats authTot="0;" authUrg="0;" total="0"/>
               </Category>
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Category>
            <Category desc="Code Duplication Detection" name="CDD" total="4">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Category>
            <Category desc="Coding Conventions" name="CODSTA" total="441">
               <Category desc="Coding Conventions for C++" name="CODSTA-CPP" total="112">
                  <Stats authTot="1;" authUrg="1;" total="1"/>
               </Category>
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Category>
            <Category desc="Exceptions" name="EXCEPT" total="26">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Category>
            <Category desc="Initialization" name="INIT" total="20">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Category>
            <Category desc="Metric" name="METRIC" total="50">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Category>
            <Category desc="MISRA C 2004" name="MISRA2004" total="221">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Category>
            <Category desc="Memory and Resource Management" name="MRM" total="60">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Category>
            <Category desc="Object Oriented" name="OOP" total="61">
               <Stats authTot="3;" authUrg="3;" total="3"/>
            </Category>
            <Category desc="Optimization" name="OPT" total="43">
               <Stats authTot="5;" authUrg="5;" total="5"/>
            </Category>
            <Category desc="Possible Bugs" name="PB" total="85">
               <Stats authTot="0;" authUrg="0;" total="0"/>
            </Category>
         </CategoriesList>
         <SeverityList>
            <Severity id="1">
               <Stats authTot="3;" authUrg="3;" total="3"/>
            </Severity>
            <Severity id="2">
               <Stats authTot="3;" authUrg="3;" total="3"/>
            </Severity>
            <Severity id="3">
               <Stats authTot="5;" authUrg="5;" total="5"/>
            </Severity>
         </SeverityList>
      </Rules>
      
  <StdViols>
    <FlowViol msg="Division by &quot;shape2.getArea()&quot; which may possibly be zero" ln="5" ruleSAFMsg="Point of division by zero" auth="mgorecka" sev="1" rule="BD-PB-ZERO" ruleSCSCMsg="Start of the path" tool="c++test" id="-1887152637" lang="cpp" locType="sr" urgent="true" config="1" hash="-1665970746" locStartln="5" locStartPos="0" locEndLn="6" locEndPos="0" locFile="/FlowAnalysisCpp/FlowAnalysisCpp/DivisionByZero.cpp" FirstElSrcRngStartln="5" FirstElSrcRngStartPos="0" FirstElSrcRngEndLn="6" FirstElSrcRngEndPos="0" FirstElSrcRngFile="/FlowAnalysisCpp/FlowAnalysisCpp/DivisionByZero.cpp">
      <Props/>
      <ElDescList>
        <ElDesc srcRngStartln="5" srcRngStartPos="0" srcRngEndLn="6" srcRngEndPos="0" srcRngFile="/FlowAnalysisCpp/FlowAnalysisCpp/DivisionByZero.cpp" srcRnghash="-1665970746" ln="5" ElType=".C" desc="shape2->getArea()" rngLn="5">
          <ElDescList>
            <ElDesc srcRngStartln="19" srcRngStartPos="0" srcRngEndLn="20" srcRngEndPos="0" srcRngFile="/FlowAnalysisCpp/FlowAnalysisCpp/Shapes.hpp" srcRnghash="1537905639" ln="19" ElType="!" desc="double getArea() const { return 0; }" rngLn="19">
              <Props/>
            </ElDesc>
          </ElDescList>
          <Props/>
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc srcRngStartln="5" srcRngStartPos="0" srcRngEndLn="6" srcRngEndPos="0" srcRngFile="/FlowAnalysisCpp/FlowAnalysisCpp/DivisionByZero.cpp" srcRnghash="-1665970746" ln="5" ElType=".P" desc="return shape1->getArea()/shape2->getArea();" rngLn="5">
          <Props/>
          <Anns>
            <Ann msg="Point of division by zero" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" ruleSAFMsg="Point where allocated memory is lost" auth="mgorecka" sev="1" rule="BD-RES-LEAKS" ruleSCSCMsg="Point where memory is allocated" tool="c++test" supp="true" id="-1842545282" lang="cpp" locType="sr" config="1" hash="-443364725" locStartln="15" locStartPos="0" locEndLn="16" locEndPos="0" locFile="/FlowAnalysisCpp/FlowAnalysisCpp/MemoryLeak.cpp" FirstElSrcRngStartln="8" FirstElSrcRngStartPos="0" FirstElSrcRngEndLn="9" FirstElSrcRngEndPos="0" FirstElSrcRngFile="/FlowAnalysisCpp/FlowAnalysisCpp/MemoryLeak.cpp">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc srcRngStartln="7" srcRngStartPos="0" srcRngEndLn="8" srcRngEndPos="0" srcRngFile="/FlowAnalysisCpp/FlowAnalysisCpp/MemoryLeak.cpp" srcRnghash="-443364725" ln="7" ElType="." desc="fscanf(file, &quot;%d&quot;, pSize);" rngLn="7">
          <Props/>
        </ElDesc>
        <ElDesc srcRngStartln="8" srcRngStartPos="0" srcRngEndLn="9" srcRngEndPos="0" srcRngFile="/FlowAnalysisCpp/FlowAnalysisCpp/MemoryLeak.cpp" srcRnghash="-443364725" ln="8" ElType=".C" desc="int* data = new int[*pSize];" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc srcRngStartln="9" srcRngStartPos="0" srcRngEndLn="10" srcRngEndPos="0" srcRngFile="/FlowAnalysisCpp/FlowAnalysisCpp/MemoryLeak.cpp" srcRnghash="-443364725" ln="9" ElType="." desc="for (int i = 0; i &lt; *pSize; i++) {" rngLn="9">
          <Props/>
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc srcRngStartln="10" srcRngStartPos="0" srcRngEndLn="11" srcRngEndPos="0" srcRngFile="/FlowAnalysisCpp/FlowAnalysisCpp/MemoryLeak.cpp" srcRnghash="-443364725" ln="10" ElType="!" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" rngLn="10">
          <Props/>
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc srcRngStartln="11" srcRngStartPos="0" srcRngEndLn="12" srcRngEndPos="0" srcRngFile="/FlowAnalysisCpp/FlowAnalysisCpp/MemoryLeak.cpp" srcRnghash="-443364725" ln="11" ElType="!E" desc="throw IOException();" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Props/>
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc srcRngStartln="15" srcRngStartPos="0" srcRngEndLn="16" srcRngEndPos="0" srcRngFile="/FlowAnalysisCpp/FlowAnalysisCpp/MemoryLeak.cpp" srcRnghash="-443364725" ln="15" ElType=".P" desc="} // parasoft-suppress BD-RES-LEAKS &quot;source-code1&quot;" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" ruleSAFMsg="Null pointer dereferencing point" auth="mgorecka" sev="1" rule="BD-PB-NP" ruleSCSCMsg="Source of null value" tool="c++test" id="1390236584" lang="cpp" locType="sr" urgent="true" config="1" hash="-1257393797" locStartln="11" locStartPos="0" locEndLn="12" locEndPos="0" locFile="/FlowAnalysisCpp/FlowAnalysisCpp/NullPointer.cpp" FirstElSrcRngStartln="7" FirstElSrcRngStartPos="0" FirstElSrcRngEndLn="8" FirstElSrcRngEndPos="0" FirstElSrcRngFile="/FlowAnalysisCpp/FlowAnalysisCpp/NullPointer.cpp">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier"/>
      </Props>
      <ElDescList>
        <ElDesc srcRngStartln="7" srcRngStartPos="0" srcRngEndLn="8" srcRngEndPos="0" srcRngFile="/FlowAnalysisCpp/FlowAnalysisCpp/NullPointer.cpp" srcRnghash="-1257393797" ln="7" ElType=".C" desc="Point* point = 0;" rngLn="7">
          <Props/>
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: point" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc srcRngStartln="8" srcRngStartPos="0" srcRngEndLn="9" srcRngEndPos="0" srcRngFile="/FlowAnalysisCpp/FlowAnalysisCpp/NullPointer.cpp" srcRnghash="-1257393797" ln="8" ElType="." desc="if (argc > 3) {" rngLn="8">
          <Props/>
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc srcRngStartln="11" srcRngStartPos="0" srcRngEndLn="12" srcRngEndPos="0" srcRngFile="/FlowAnalysisCpp/FlowAnalysisCpp/NullPointer.cpp" srcRnghash="-1257393797" ln="11" ElType=".P" desc="point->reflectAcrossX();" rngLn="11">
          <Props/>
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Class 'Shape' has virtual functions without a virtual destructor" ln="6" sev="2" auth="mgorecka" rule="OOP-23" tool="c++test" cat="OOP" lang="cpp" locType="sr" urgent="true" config="1" hash="1537905639" locStartln="6" locStartPos="6" locEndLn="6" locEndPos="7" locFile="/FlowAnalysisCpp/FlowAnalysisCpp/Shapes.hpp"/>
    <StdViol msg="Constructor 'Shape' allowing conversion should be made explicit" ln="12" sev="1" auth="mgorecka" rule="CODSTA-CPP-04" tool="c++test" cat="CODSTA-CPP" lang="cpp" locType="sr" urgent="true" config="1" hash="1537905639" locStartln="12" locStartPos="4" locEndLn="12" locEndPos="5" locFile="/FlowAnalysisCpp/FlowAnalysisCpp/Shapes.hpp"/>
    <StdViol msg="The parameter 'position' of function 'Shape' is passed by value" ln="12" sev="3" auth="mgorecka" rule="OPT-14" tool="c++test" cat="OPT" lang="cpp" locType="sr" urgent="true" config="1" hash="1537905639" locStartln="12" locStartPos="16" locEndLn="12" locEndPos="17" locFile="/FlowAnalysisCpp/FlowAnalysisCpp/Shapes.hpp"/>
    <StdViol msg="Class 'LineSegment' has virtual functions without a virtual destructor" ln="15" sev="2" auth="mgorecka" rule="OOP-23" tool="c++test" cat="OOP" lang="cpp" locType="sr" urgent="true" config="1" hash="1537905639" locStartln="15" locStartPos="6" locEndLn="15" locEndPos="7" locFile="/FlowAnalysisCpp/FlowAnalysisCpp/Shapes.hpp"/>
    <StdViol msg="The parameter 'end' of function 'LineSegment' is passed by value" ln="18" sev="3" auth="mgorecka" rule="OPT-14" tool="c++test" cat="OPT" lang="cpp" locType="sr" urgent="true" config="1" hash="1537905639" locStartln="18" locStartPos="38" locEndLn="18" locEndPos="39" locFile="/FlowAnalysisCpp/FlowAnalysisCpp/Shapes.hpp"/>
    <StdViol msg="The parameter 'position' of function 'LineSegment' is passed by value" ln="18" sev="3" auth="mgorecka" rule="OPT-14" tool="c++test" cat="OPT" lang="cpp" locType="sr" urgent="true" config="1" hash="1537905639" locStartln="18" locStartPos="22" locEndLn="18" locEndPos="23" locFile="/FlowAnalysisCpp/FlowAnalysisCpp/Shapes.hpp"/>
    <StdViol msg="Class 'Circle' has virtual functions without a virtual destructor" ln="22" sev="2" auth="mgorecka" rule="OOP-23" tool="c++test" cat="OOP" lang="cpp" locType="sr" urgent="true" config="1" hash="1537905639" locStartln="22" locStartPos="6" locEndLn="22" locEndPos="7" locFile="/FlowAnalysisCpp/FlowAnalysisCpp/Shapes.hpp"/>
    <StdViol msg="The parameter 'position' of function 'Circle' is passed by value" ln="25" sev="3" auth="mgorecka" rule="OPT-14" tool="c++test" cat="OPT" lang="cpp" locType="sr" urgent="true" config="1" hash="1537905639" locStartln="25" locStartPos="17" locEndLn="25" locEndPos="18" locFile="/FlowAnalysisCpp/FlowAnalysisCpp/Shapes.hpp"/>
    <StdViol msg="The parameter 'point' of function 'contains' is passed by value" ln="27" sev="3" auth="mgorecka" rule="OPT-14" tool="c++test" cat="OPT" lang="cpp" locType="sr" urgent="true" config="1" hash="1537905639" locStartln="27" locStartPos="23" locEndLn="27" locEndPos="24" locFile="/FlowAnalysisCpp/FlowAnalysisCpp/Shapes.hpp"/>
  </StdViols>

      <Supps>
         <Supp suppAuth="mgorecka" suppCount="1" suppLine="15" suppLoc="/FlowAnalysisCpp/FlowAnalysisCpp/MemoryLeak.cpp" suppMsg="Memory not deallocated: data" suppRsn="source-code1" suppRule="BD-RES-LEAKS"/>
      </Supps>
      
      
   </CodingStandards>
   <Metrics ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:20">
      
   </Metrics>
   <AssocUrls/>
</ResultsSession>